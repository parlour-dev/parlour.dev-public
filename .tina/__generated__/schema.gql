# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String): PostConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String): GlobalConnection!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String): AuthorConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String): PageConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Post | Global | Author | Page

union PostAuthor = Author

type Post implements Node & Document {
  title: String
  heroImg: String
  excerpt: JSON
  author: PostAuthor
  date: String
  _body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type GlobalHeaderIcon {
  color: String
  style: String
  name: String
}

type GlobalHeaderNav {
  href: String
  label: String
}

type GlobalHeader {
  icon: GlobalHeaderIcon
  color: String
  nav: [GlobalHeaderNav]
}

type GlobalFooterServices {
  name: String
  href: String
}

type GlobalFooter {
  color: String
  services: [GlobalFooterServices]
}

type GlobalTheme {
  color: String
  font: String
  icon: String
  darkMode: String
}

type Global implements Node & Document {
  header: GlobalHeader
  footer: GlobalFooter
  theme: GlobalTheme
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Author implements Node & Document {
  name: String
  avatar: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

type PageBlocksHeroCta {
  href: String
  text: String
}

type PageBlocksHeroImage {
  src: String
  alt: String
}

type PageBlocksHero {
  text: JSON
  cta: PageBlocksHeroCta
  image: PageBlocksHeroImage
}

type PageBlocksFeaturesItems {
  image: String
  title: String
  text: String
}

type PageBlocksFeatures {
  heading: JSON
  items: [PageBlocksFeaturesItems]
  color: String
}

type PageBlocksContent {
  body: JSON
  color: String
}

type PageBlocksTestimonialTestimonials {
  name: String
  title: String
  image: String
  reference: JSON
}

type PageBlocksTestimonial {
  heading: JSON
  testimonials: [PageBlocksTestimonialTestimonials]
}

type PageBlocksReasonsItems {
  image: String
  title: String
  href: String
}

type PageBlocksReasons {
  heading: JSON
  monochrome: Boolean
  items: [PageBlocksReasonsItems]
}

type PageBlocksClientsRollItems {
  image: String
  alt: String
  maxHeight: String
}

type PageBlocksClientsRoll {
  items: [PageBlocksClientsRollItems]
}

type PageBlocksContentStackItems {
  image: String
  title: String
  description: JSON
}

type PageBlocksContentStack {
  heading: JSON
  items: [PageBlocksContentStackItems]
}

type PageBlocksConsultation {
  heading: JSON
  text: JSON
  ctatext: String
  subscription_type: String
}

type PageBlocksFaqQuestions {
  question: String
  answer: JSON
}

type PageBlocksFaq {
  heading: JSON
  questions: [PageBlocksFaqQuestions]
}

type PageBlocksSoftwareSoftware {
  name: String
  tagline: String
  description: JSON
  image: String
  image2: String
  from: String
  to: String
  href: String
}

type PageBlocksSoftware {
  heading: JSON
  software: [PageBlocksSoftwareSoftware]
}

type PageBlocksNewsletter {
  buttonText: String
}

type PageBlocksProjectPictures {
  image: String
}

type PageBlocksProject {
  name: String
  description: JSON
  casestudy: JSON
  pictures: [PageBlocksProjectPictures]
}

type PageBlocksMinorHero {
  heading: JSON
  text: JSON
  picture: String
  compact: Boolean
}

type PageBlocksPadding {
  height: String
}

union PageBlocks = PageBlocksHero | PageBlocksFeatures | PageBlocksContent | PageBlocksTestimonial | PageBlocksReasons | PageBlocksClientsRoll | PageBlocksContentStack | PageBlocksConsultation | PageBlocksFaq | PageBlocksSoftware | PageBlocksNewsletter | PageBlocksProject | PageBlocksMinorHero | PageBlocksPadding

type Page implements Node & Document {
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
}

input DocumentMutation {
  post: PostMutation
  global: GlobalMutation
  author: AuthorMutation
  page: PageMutation
}

input PostMutation {
  title: String
  heroImg: String
  excerpt: JSON
  author: String
  date: String
  _body: JSON
}

input GlobalHeaderIconMutation {
  color: String
  style: String
  name: String
}

input GlobalHeaderNavMutation {
  href: String
  label: String
}

input GlobalHeaderMutation {
  icon: GlobalHeaderIconMutation
  color: String
  nav: [GlobalHeaderNavMutation]
}

input GlobalFooterServicesMutation {
  name: String
  href: String
}

input GlobalFooterMutation {
  color: String
  services: [GlobalFooterServicesMutation]
}

input GlobalThemeMutation {
  color: String
  font: String
  icon: String
  darkMode: String
}

input GlobalMutation {
  header: GlobalHeaderMutation
  footer: GlobalFooterMutation
  theme: GlobalThemeMutation
}

input AuthorMutation {
  name: String
  avatar: String
}

input PageBlocksHeroCtaMutation {
  href: String
  text: String
}

input PageBlocksHeroImageMutation {
  src: String
  alt: String
}

input PageBlocksHeroMutation {
  text: JSON
  cta: PageBlocksHeroCtaMutation
  image: PageBlocksHeroImageMutation
}

input PageBlocksFeaturesItemsMutation {
  image: String
  title: String
  text: String
}

input PageBlocksFeaturesMutation {
  heading: JSON
  items: [PageBlocksFeaturesItemsMutation]
  color: String
}

input PageBlocksContentMutation {
  body: JSON
  color: String
}

input PageBlocksTestimonialTestimonialsMutation {
  name: String
  title: String
  image: String
  reference: JSON
}

input PageBlocksTestimonialMutation {
  heading: JSON
  testimonials: [PageBlocksTestimonialTestimonialsMutation]
}

input PageBlocksReasonsItemsMutation {
  image: String
  title: String
  href: String
}

input PageBlocksReasonsMutation {
  heading: JSON
  monochrome: Boolean
  items: [PageBlocksReasonsItemsMutation]
}

input PageBlocksClientsRollItemsMutation {
  image: String
  alt: String
  maxHeight: String
}

input PageBlocksClientsRollMutation {
  items: [PageBlocksClientsRollItemsMutation]
}

input PageBlocksContentStackItemsMutation {
  image: String
  title: String
  description: JSON
}

input PageBlocksContentStackMutation {
  heading: JSON
  items: [PageBlocksContentStackItemsMutation]
}

input PageBlocksConsultationMutation {
  heading: JSON
  text: JSON
  ctatext: String
  subscription_type: String
}

input PageBlocksFaqQuestionsMutation {
  question: String
  answer: JSON
}

input PageBlocksFaqMutation {
  heading: JSON
  questions: [PageBlocksFaqQuestionsMutation]
}

input PageBlocksSoftwareSoftwareMutation {
  name: String
  tagline: String
  description: JSON
  image: String
  image2: String
  from: String
  to: String
  href: String
}

input PageBlocksSoftwareMutation {
  heading: JSON
  software: [PageBlocksSoftwareSoftwareMutation]
}

input PageBlocksNewsletterMutation {
  buttonText: String
}

input PageBlocksProjectPicturesMutation {
  image: String
}

input PageBlocksProjectMutation {
  name: String
  description: JSON
  casestudy: JSON
  pictures: [PageBlocksProjectPicturesMutation]
}

input PageBlocksMinorHeroMutation {
  heading: JSON
  text: JSON
  picture: String
  compact: Boolean
}

input PageBlocksPaddingMutation {
  height: String
}

input PageBlocksMutation {
  hero: PageBlocksHeroMutation
  features: PageBlocksFeaturesMutation
  content: PageBlocksContentMutation
  testimonial: PageBlocksTestimonialMutation
  reasons: PageBlocksReasonsMutation
  clientsRoll: PageBlocksClientsRollMutation
  contentStack: PageBlocksContentStackMutation
  consultation: PageBlocksConsultationMutation
  faq: PageBlocksFaqMutation
  software: PageBlocksSoftwareMutation
  newsletter: PageBlocksNewsletterMutation
  project: PageBlocksProjectMutation
  minorHero: PageBlocksMinorHeroMutation
  padding: PageBlocksPaddingMutation
}

input PageMutation {
  blocks: [PageBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  